{"version":3,"sources":["tile.js","grid.js","renderer.js","input-manager.js","game-manager.js","app.js"],"names":["CSS_TILE_CLASS","CSS_VALUE_CLASS","TILE_SIZE","TILE_GAP","TILE_AREA_PADDING","TILE_TOTAL","Position","x","y","getColor","value","toPixels","coord","Tile","pos","parentElement","position","prevPosition","mergedFrom","parent","html","createHTMLTile","needsAnim","draw","bind","progress","post","preMerge","drawMerge","progressMerge","postMerge","instantRender","tile","document","createElement","className","innerHTML","appendChild","i","length","removeChild","forEach","time","other","tileProg","otherProg","style","background","removeMerged","top","left","Math","round","otherTile","push","DIRECTION","UP","DOWN","LEFT","RIGHT","Grid","size","matrix","createMatrix","Array","j","row","pos2","tmp","callback","to","from","removeTile","requestAnimation","updatePosition","rows","getRows","columns","getColumns","column","unusedTiles","unusedPositions","floor","random","positions","eachTile","tiles","adj","SCORE_DISPLAY_ID","TILE_AREA_CLASS","SCORE_ID","MENU_OPACITY","MENU_CSS_CLASS","animate","pre","duration","start","performance","now","requestAnimationFrame","frame","timeFraction","progressData","Renderer","grid","scoreDisplay","querySelector","tileArea","score","getTile","needsAnimation","didMerge","element","div","querySelectorAll","menu","remove","toFixed","prog","opacity","EVENTS","MOVE","RESTART","InputManager","events","onEvent","addEventListener","e","eventName","event","key","STATE","INPROGRESS","INMENU","GAME_STATE","LOST","WON","NEUTRAL","MESSAGES","LOSE","PLAY_AGAIN","MENU_TEXT_CSS_CLASS","MENU_BUTTON_CSS_CLASS","RESTART_BUTTON_ID","GameManager","state","gameState","inputManager","renderer","gameAreaHTML","addRandomTile","onRestart","onMove","on","startGame","direction","moved","moveUp","moveDown","moveLeft","moveRight","render","setTimeout","eachColumn","availableY","lastTile","currentTile","merge","moveTile","eachRow","availableX","mergeValue","merged","setMergedFrom","insertTile","renderScore","removeMenus","removeHTML","isFull","getRandomUnusedTile","checkMovement","isLost","adjacentTiles","getAdjacentTiles","renderLose","display","flexDirection","justifyContent","p","button","renderMenu"],"mappings":"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","file":"app.map","sourceRoot":"../../src/js","sourcesContent":["const CSS_TILE_CLASS = 'tile';\nconst CSS_VALUE_CLASS = 'value';\nconst TILE_SIZE = 90;\nconst TILE_GAP = 16; // 2 * 8\nconst TILE_AREA_PADDING = 7;\nconst TILE_TOTAL = TILE_SIZE + TILE_GAP;\n\nexport class Position {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nexport function getColor(value) {\n  switch (value) {\n    case 2:\n      return '#a6b3cc';\n    case 4:\n      return '#565575';\n    case 8:\n      return '#ffe9aa';\n    case 16:\n      return '#ff8080';\n    case 32:\n      return '#95ffa4';\n    case 64:\n      return '#91ddff';\n    case 128:\n      return '#c991e1';\n    case 256:\n      return '#aaffe4';\n    case 512:\n      return '#cbe3e7';\n    case 1024:\n      return '#ff5458';\n    case 2048:\n      return '#65b2ff';\n    default:\n      return '#100e23';\n  }\n}\n\nfunction toPixels(coord) {\n  return coord * TILE_TOTAL + TILE_AREA_PADDING;\n}\n\nexport default class Tile {\n  constructor(pos, value, parentElement) {\n    this.position = pos;\n    this.prevPosition = null;\n    this.value = value;\n    this.mergedFrom = [];\n    this.parent = parentElement;\n    this.html = this.createHTMLTile(this.parent);\n    this.needsAnim = false;\n\n    this.draw = this.draw.bind(this);\n    this.progress = this.progress.bind(this);\n    this.post = this.post.bind(this);\n\n    this.preMerge = this.preMerge.bind(this);\n    this.drawMerge = this.drawMerge.bind(this);\n    this.progressMerge = this.progressMerge.bind(this);\n    this.postMerge = this.postMerge.bind(this);\n\n    this.instantRender();\n  }\n\n  createHTMLTile() {\n    const tile = document.createElement('div');\n    tile.className = CSS_TILE_CLASS;\n\n    const value = document.createElement('p');\n    value.className = CSS_VALUE_CLASS;\n    value.innerHTML = this.value;\n\n    tile.appendChild(value);\n    this.parent.appendChild(tile);\n    return tile;\n  }\n\n  removeMerged() {\n    for (let i = 0; i < this.mergedFrom.length; i += 1) {\n      this.parent.removeChild(this.mergedFrom[i].html);\n    }\n    this.mergedFrom = [];\n  }\n\n  preMerge() {\n    // For fast players\n    if (this.mergedFrom.length === 0) { return; }\n\n    /*  eslint no-param-reassign: off */\n    const prepare = (tile) => {\n      if (tile.prevPosition === null) {\n        tile.prevPosition = tile.position;\n        tile.position = new Position(this.position.x, this.position.y);\n      } else {\n        tile.position = new Position(this.position.x, this.position.y);\n      }\n    };\n    /*  eslint no-param-reassign: error */\n\n    this.mergedFrom.forEach(prepare);\n  }\n\n  progressMerge(time) {\n    // For fast players\n    if (this.mergedFrom.length === 0) { return {}; }\n\n    const tile = this.mergedFrom[0];\n    const other = this.mergedFrom[1];\n    const tileProg = tile.progress(time);\n    const otherProg = other.progress(time);\n    return { tileProg, otherProg };\n  }\n\n  drawMerge(progress) {\n    // For fast players\n    if (this.mergedFrom.length === 0) { return; }\n\n    const tile = this.mergedFrom[0];\n    const other = this.mergedFrom[1];\n\n    tile.draw(progress.tileProg);\n    other.draw(progress.otherProg);\n  }\n\n  postMerge() {\n    this.html.style.background = getColor(this.value);\n    this.removeMerged();\n    this.needsAnim = false;\n  }\n\n\n  draw(progress) {\n    if (this.prevPosition) {\n      const x = toPixels(this.prevPosition.x) + progress.x;\n      const y = toPixels(this.prevPosition.y) + progress.y;\n      this.html.style.top = `${y}px`;\n      this.html.style.left = `${x}px`;\n    }\n  }\n\n  progress(time) {\n    if (this.prevPosition) {\n      const progX = Math.round(\n        (this.position.x - this.prevPosition.x) * TILE_TOTAL * time,\n      );\n\n      const progY = Math.round(\n        (this.position.y - this.prevPosition.y) * TILE_TOTAL * time,\n      );\n\n      return { x: progX, y: progY };\n    }\n    return { x: 0, y: 0 };\n  }\n\n  post() {\n    this.prevPosition = null;\n    this.needsAnim = false;\n  }\n\n\n  instantRender() {\n    this.html.style.left = `${toPixels(this.position.x)}px`;\n    this.html.style.top = `${toPixels(this.position.y)}px`;\n    this.html.style.background = getColor(this.value);\n  }\n\n  removeHTML() {\n    this.parent.removeChild(this.html);\n  }\n\n  setMergedFrom(tile, otherTile) {\n    if (this.mergedFrom.length > 2) {\n      // console.error('mergedFrom array too large', this.mergedFrom.length);\n      return;\n    }\n\n    this.mergedFrom.push(tile);\n    this.mergedFrom.push(otherTile);\n  }\n\n  clearMergedFrom() {\n    this.mergedFrom = [];\n  }\n\n  didMerge() {\n    return this.mergedFrom.length > 0;\n  }\n\n  requestAnimation() {\n    this.needsAnim = true;\n  }\n\n  needsAnimation() {\n    return this.needsAnim;\n  }\n\n  updatePosition(pos) {\n    this.prevPosition = this.position;\n    this.position = pos;\n  }\n}\n","import { Position } from './tile';\n\nexport const DIRECTION = {\n  UP: 1, DOWN: 2, LEFT: 3, RIGHT: 4,\n};\n\n/*\n          X\n    +------------>\n    | 0,0   1,0\n    |\n Y  | 0,1\n    |\n    V\n*/\nexport default class Grid {\n  constructor(size = 4) {\n    this.size = size;\n    this.matrix = this.createMatrix();\n  }\n\n  createMatrix() {\n    const matrix = new Array(this.size);\n    for (let i = 0; i < this.size; i += 1) {\n      matrix[i] = new Array(this.size);\n    }\n\n    // Initialize array with null values\n    for (let i = 0; i < this.size; i += 1) {\n      for (let j = 0; j < this.size; j += 1) {\n        matrix[i][j] = null;\n      }\n    }\n    return matrix;\n  }\n\n  getTile(i) {\n    if (i < 0 || i > (this.size ** 2) - 1) return '';\n\n    let position = i;\n    let row = 0;\n    while (position >= 4) {\n      position -= this.size;\n      row += 1;\n    }\n\n    const tile = this.matrix[position][row];\n    if (!tile) { return null; }\n    return tile;\n  }\n\n  insertTile(tile) {\n    this.matrix[tile.position.x][tile.position.y] = tile;\n  }\n\n  swapTiles(pos, pos2) {\n    const tmp = this.matrix[pos2.x][pos2.y];\n    this.matrix[pos2.x][pos2.y] = this.matrix[pos.x][pos.y];\n    this.matrix[pos.x][pos.y] = tmp;\n  }\n\n  removeTile(x, y) {\n    this.matrix[x][y] = null;\n  }\n\n  eachTile(callback) {\n    for (let x = 0; x < this.size; x += 1) {\n      for (let y = 0; y < this.size; y += 1) {\n        callback(x, y, this.matrix[x][y]);\n      }\n    }\n  }\n\n  // debug() {\n  //   this.eachTile((x, y, tile) => {\n  //     if (tile) {\n  //       console.log('(', tile.position.x,\n  //         ',', tile.position.y, '), with value ', tile.value);\n  //     }\n  //   });\n  // }\n\n  moveTile(tile, to) {\n    const from = tile.position;\n    this.matrix[to.x][to.y] = this.matrix[from.x][from.y];\n    this.removeTile(from.x, from.y);\n\n    tile.requestAnimation();\n    tile.updatePosition(new Position(to.x, to.y));\n  }\n\n  eachRow(callback) {\n    const rows = this.getRows();\n    for (let i = 0; i < rows.length; i += 1) {\n      callback(rows[i]);\n    }\n  }\n\n  eachColumn(callback) {\n    const columns = this.getColumns();\n    for (let i = 0; i < columns.length; i += 1) {\n      callback(columns[i]);\n    }\n  }\n\n  getRows() {\n    const columns = [];\n    for (let y = 0; y < this.size; y += 1) {\n      const column = [];\n      for (let x = 0; x < this.size; x += 1) {\n        column.push(this.matrix[x][y]);\n      }\n      columns.push(column);\n    }\n    return columns;\n  }\n\n  getColumns() {\n    const rows = [];\n    for (let x = 0; x < this.size; x += 1) {\n      const row = [];\n      for (let y = 0; y < this.size; y += 1) {\n        row.push(this.matrix[x][y]);\n      }\n      rows.push(row);\n    }\n    return rows;\n  }\n\n  isFull() {\n    return this.unusedTiles().length === 0;\n  }\n\n  getRandomUnusedTile() {\n    const unusedPositions = this.unusedTiles();\n    return unusedPositions[Math.floor(Math.random() * unusedPositions.length)];\n  }\n\n  unusedTiles() {\n    const positions = [];\n    this.eachTile((x, y, tile) => {\n      if (!tile) {\n        positions.push(new Position(x, y));\n      }\n    });\n    return positions;\n  }\n\n  getAdjacentTiles(tile) {\n    const tiles = [];\n    let adj = null;\n\n    if (tile.position.x > 0) {\n      adj = this.matrix[tile.position.x - 1][tile.position.y];\n      if (adj) { tiles.push(adj); }\n    }\n\n    if (tile.position.x < this.size - 1) {\n      adj = this.matrix[tile.position.x + 1][tile.position.y];\n      if (adj) { tiles.push(adj); }\n    }\n\n    if (tile.position.y > 0) {\n      adj = this.matrix[tile.position.x][tile.position.y - 1];\n      if (adj) { tiles.push(adj); }\n    }\n\n    if (tile.position.y < this.size - 1) {\n      adj = this.matrix[tile.position.x][tile.position.y + 1];\n      if (adj) { tiles.push(adj); }\n    }\n    return tiles;\n  }\n}\n","const SCORE_DISPLAY_ID = 'score-display';\nconst TILE_AREA_CLASS = 'tile-area';\nconst SCORE_ID = 'score';\nconst MENU_OPACITY = 0.8;\nconst MENU_CSS_CLASS = 'menu';\n\nfunction animate({\n  pre = () => 0, progress = () => 0, draw = () => 0, post = () => 0, duration,\n}) {\n  const start = performance.now();\n\n  pre();\n\n  requestAnimationFrame(function frame(time) {\n    // timeFraction goes from 0 to 1\n    let timeFraction = (time - start) / duration;\n    if (timeFraction > 1) timeFraction = 1;\n\n    // calculate the current animation state\n    const progressData = progress(timeFraction);\n\n    draw(progressData); // draw it\n\n    if (timeFraction === 1) {\n      post();\n    }\n\n    if (timeFraction < 1) {\n      requestAnimationFrame(frame);\n    }\n  });\n}\n\nexport default class Renderer {\n  constructor(grid) {\n    this.grid = grid;\n    this.scoreDisplay = document.querySelector(`#${SCORE_DISPLAY_ID}`);\n    this.tileArea = document.querySelector(`.${TILE_AREA_CLASS}`);\n  }\n\n  renderScore(score) {\n    this.scoreDisplay.querySelector(`#${SCORE_ID}`).innerHTML = score;\n  }\n\n  render() {\n    for (let i = 0; i < this.grid.size ** 2; i += 1) {\n      const tile = this.grid.getTile(i);\n      if (tile && tile.needsAnimation) {\n        if (tile.didMerge()) {\n          animate({\n            pre: tile.preMerge,\n            progress: tile.progressMerge,\n            draw: tile.drawMerge,\n            post: tile.postMerge,\n            duration: 150,\n          });\n        } else {\n          animate({\n            progress: tile.progress,\n            draw: tile.draw,\n            post: tile.post,\n            duration: 150,\n          });\n        }\n      }\n    }\n  }\n\n  renderMenu(element) {\n    const div = document.createElement('div');\n    div.className = MENU_CSS_CLASS;\n\n    div.appendChild(element);\n\n    this.tileArea.appendChild(div);\n  }\n\n  removeMenus() {\n    const menus = this.tileArea.querySelectorAll(`.${MENU_CSS_CLASS}`);\n    menus.forEach((menu) => {\n      function progress(time) {\n        if (MENU_OPACITY - time < 0) {\n          return 0;\n        }\n        return (MENU_OPACITY - time).toFixed(2);\n      }\n\n      function draw(prog) {\n        /*  eslint no-param-reassign: off */\n\n        menu.style.opacity = prog;\n\n        /*  eslint no-param-reassign: error */\n      }\n\n      function post() {\n        menu.remove();\n      }\n\n      animate({\n        post,\n        progress,\n        draw,\n        duration: 200,\n      });\n    });\n  }\n}\n","import { DIRECTION } from './grid';\n\nexport const EVENTS = { MOVE: 'move', RESTART: 'restart' };\n\nexport default class InputManager {\n  constructor() {\n    this.events = {};\n    this.onEvent = this.onEvent.bind(this);\n    document.addEventListener('keydown', e => this.onEvent(e, this.events));\n  }\n\n  on(eventName, callback) {\n    this.events[eventName] = callback;\n  }\n\n  onEvent(event) {\n    switch (event.key) {\n      case 'ArrowUp':\n      case 'w':\n        this.events[EVENTS.MOVE](DIRECTION.UP);\n        break;\n      case 'ArrowDown':\n      case 's':\n        this.events[EVENTS.MOVE](DIRECTION.DOWN);\n        break;\n      case 'ArrowRight':\n      case 'd':\n        this.events[EVENTS.MOVE](DIRECTION.RIGHT);\n        break;\n      case 'ArrowLeft':\n      case 'a':\n        this.events[EVENTS.MOVE](DIRECTION.LEFT);\n        break;\n      case 'r':\n        this.events[EVENTS.RESTART]();\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import Grid, { DIRECTION } from './grid';\nimport Tile, { Position } from './tile';\nimport Renderer from './renderer';\nimport InputManager, { EVENTS } from './input-manager';\n\nconst STATE = { INPROGRESS: 2, INMENU: 3 };\nconst GAME_STATE = { LOST: 0, WON: 1, NEUTRAL: 2 };\nconst MESSAGES = { LOSE: 'Game Over!', PLAY_AGAIN: 'Play again?' };\nconst MENU_TEXT_CSS_CLASS = 'menu-text';\nconst MENU_BUTTON_CSS_CLASS = 'menu-button';\nconst RESTART_BUTTON_ID = 'restart-button';\n\nexport default class GameManager {\n  constructor(size) {\n    this.score = 0;\n    this.grid = new Grid(size);\n    this.state = STATE.INMENU;\n    this.gameState = GAME_STATE.NEUTRAL;\n    this.inputManager = new InputManager();\n    this.renderer = new Renderer(this.grid);\n    this.gameAreaHTML = document.querySelector('div.tile-area');\n    this.addRandomTile = this.addRandomTile.bind(this);\n\n    // Pass in methods from this class\n    this.onRestart = this.onRestart.bind(this);\n    this.onMove = this.onMove.bind(this);\n\n    this.inputManager.on(EVENTS.MOVE, this.onMove);\n    this.inputManager.on(EVENTS.RESTART, this.onRestart);\n\n    const restartButton = document.querySelector(`#${RESTART_BUTTON_ID}`);\n    restartButton.addEventListener('click', this.onRestart);\n\n    this.startGame();\n  }\n\n  /**\n   * Move and merge tiles to specified direction\n   * @param direction diretion to move and merge tiles\n   */\n\n  onMove(direction) {\n    if (this.state === STATE.INMENU) { return; }\n    let moved = false;\n\n    switch (direction) {\n      case DIRECTION.UP:\n        moved = this.moveUp();\n        break;\n      case DIRECTION.DOWN:\n        moved = this.moveDown();\n        break;\n      case DIRECTION.LEFT:\n        moved = this.moveLeft();\n        break;\n      case DIRECTION.RIGHT:\n        moved = this.moveRight();\n        break;\n      default:\n        break;\n    }\n    this.renderer.render();\n    if (moved) {\n      setTimeout(this.addRandomTile, 100);\n    }\n  }\n\n  moveUp() {\n    let moved = false;\n\n    this.grid.eachColumn((column) => {\n      if (!column) return;\n\n      let availableY = 0;\n      let lastTile = null;\n\n      for (let i = 0; i < this.grid.size; i += 1) {\n        if (column[i]) {\n          const currentTile = column[i];\n\n          if (lastTile && lastTile.value === currentTile.value) {\n            this.merge(lastTile, currentTile);\n            moved = true;\n            lastTile = null;\n          } else {\n            lastTile = currentTile;\n            if (currentTile.position.y !== availableY) {\n              moved = true;\n              this.grid.moveTile(\n                currentTile,\n                new Position(\n                  currentTile.position.x,\n                  availableY,\n                ),\n              );\n            }\n            availableY += 1;\n          }\n        }\n      }\n    });\n    return moved;\n  }\n\n  moveDown() {\n    let moved = false;\n    this.grid.eachColumn((column) => {\n      if (!column) return;\n\n      let availableY = this.grid.size - 1;\n      let lastTile = null;\n\n      for (let i = this.grid.size - 1; i >= 0; i -= 1) {\n        if (column[i]) {\n          const currentTile = column[i];\n\n          if (lastTile && lastTile.value === currentTile.value) {\n            this.merge(lastTile, currentTile);\n            moved = true;\n            lastTile = null;\n          } else {\n            lastTile = currentTile;\n            if (currentTile.position.y !== availableY) {\n              moved = true;\n              this.grid.moveTile(\n                currentTile,\n                new Position(\n                  currentTile.position.x,\n                  availableY,\n                ),\n              );\n            }\n            availableY -= 1;\n          }\n        }\n      }\n    });\n    return moved;\n  }\n\n  moveLeft() {\n    let moved = false;\n    this.grid.eachRow((row) => {\n      if (!row) return;\n\n      let availableX = 0;\n      let lastTile = null;\n\n      for (let i = 0; i < this.grid.size; i += 1) {\n        if (row[i]) {\n          const currentTile = row[i];\n\n          if (lastTile && lastTile.value === currentTile.value) {\n            this.merge(lastTile, currentTile);\n            moved = true;\n            lastTile = null;\n          } else {\n            lastTile = currentTile;\n            if (currentTile.position.x !== availableX) {\n              moved = true;\n              this.grid.moveTile(\n                currentTile,\n                new Position(\n                  availableX,\n                  currentTile.position.y,\n                ),\n              );\n            }\n            availableX += 1;\n          }\n        }\n      }\n    });\n    return moved;\n  }\n\n  moveRight() {\n    let moved = false;\n    this.grid.eachRow((row) => {\n      if (!row) return;\n\n      let availableX = this.grid.size - 1;\n      let lastTile = null;\n\n      for (let i = this.grid.size - 1; i >= 0; i -= 1) {\n        if (row[i]) {\n          const currentTile = row[i];\n\n          if (lastTile && lastTile.value === currentTile.value) {\n            this.merge(lastTile, currentTile);\n            moved = true;\n            lastTile = null;\n          } else {\n            lastTile = currentTile;\n            if (currentTile.position.x !== availableX) {\n              moved = true;\n              this.grid.moveTile(\n                currentTile,\n                new Position(\n                  availableX,\n                  currentTile.position.y,\n                ),\n              );\n            }\n            availableX -= 1;\n          }\n        }\n      }\n    });\n    return moved;\n  }\n\n  merge(tile, other) {\n    const mergeValue = tile.value * 2;\n    if (mergeValue === 2048) { this.gameState = GAME_STATE.WON; }\n    this.score += mergeValue;\n\n    this.grid.removeTile(tile.position.x, tile.position.y);\n    this.grid.removeTile(other.position.x, other.position.y);\n\n    const merged = new Tile(tile.position, mergeValue, this.gameAreaHTML);\n    merged.setMergedFrom(tile, other);\n    merged.requestAnimation();\n    this.grid.insertTile(merged);\n\n    this.renderer.renderScore(this.score);\n  }\n\n  onRestart() {\n    this.renderer.removeMenus();\n\n    // Arrowfunction takes this from here\n    this.grid.eachTile((x, y, tile) => {\n      if (!tile) { return; }\n      tile.removeHTML();\n\n      this.grid.removeTile(x, y);\n    });\n\n    this.startGame();\n  }\n\n  startGame() {\n    // Start a new game\n    this.gameState = GAME_STATE.NEUTRAL;\n    this.state = STATE.INPROGRESS;\n    this.score = 0;\n    this.renderer.renderScore(this.score);\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  addRandomTile() {\n    if (!this.grid.isFull()) {\n      const value = Math.random() < 0.9 ? 2 : 4;\n      const tile = new Tile(\n        this.grid.getRandomUnusedTile(),\n        value,\n        this.gameAreaHTML,\n      );\n      this.grid.insertTile(tile);\n\n      this.checkMovement();\n    }\n  }\n\n  checkMovement() {\n    if (!this.grid.isFull()) { return; }\n\n    let isLost = true;\n\n    this.grid.eachTile((x, y, tile) => {\n      if (!isLost) { return; }\n      const adjacentTiles = this.grid.getAdjacentTiles(tile);\n      for (let i = 0; i < adjacentTiles.length; i += 1) {\n        if (adjacentTiles[i].value === tile.value) {\n          isLost = false;\n          break;\n        }\n      }\n    });\n\n    if (isLost) {\n      this.renderLose();\n    }\n  }\n\n  continueGame() {\n    this.renderer.removeMenus();\n    this.state = STATE.NEUTRAL;\n  }\n\n  renderLose() {\n    this.gameState = GAME_STATE.LOST;\n    this.state = STATE.INMENU;\n\n    const div = document.createElement('div');\n    div.style.display = 'flex';\n    div.style.flexDirection = 'column';\n    div.style.justifyContent = 'center';\n\n    const p = document.createElement('p');\n    p.className = MENU_TEXT_CSS_CLASS;\n    p.innerHTML = MESSAGES.LOSE;\n\n    const button = document.createElement('button');\n    button.className = MENU_BUTTON_CSS_CLASS;\n    button.innerHTML = MESSAGES.PLAY_AGAIN;\n    button.addEventListener('click', this.onRestart);\n\n    div.appendChild(p);\n    div.appendChild(button);\n\n    this.renderer.renderMenu(div);\n  }\n}\n","import GameManager from './game-manager';\n\nGameManager(4);\n"]}